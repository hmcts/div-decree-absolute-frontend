#!groovy

@Library("Infrastructure")

String product = "div"
String component = "da"

List<LinkedHashMap<String, Object>> secrets = [
        secret('session-secret', 'SESSION_SECRET'),
        secret('redis-secret', 'REDIS_ENCRYPTION_SECRET'),
        secret('idam-secret', 'IDAM_SECRET')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("nodejs", product, component) {
  if (env.CHANGE_TITLE && !env.CHANGE_TITLE.startsWith('[PREVIEW]')) {
    enableDockerBuild()
    installCharts()
  }

  loadVaultSecrets(secrets)
  setVaultName('div')

  before('securitychecks') {
    stage('Test HTML') {
      sh 'yarn test:validation'
      sh 'yarn test:a11y'
    }
    stage('Test E2E') {
      sh 'yarn test:e2e'
    }

    stage('Audit') {
      try {
        sh 'yarn audit'
      } catch (error) {
        onMaster {
          slackSend(channel: '#div-dev', color: 'warning', message: "Yarn Audit has detected vulnerabilities in ${env.JOB_NAME}. You can check if there are patches for them in the full report, build details here: <${env.RUN_DISPLAY_URL}|Build ${env.BUILD_DISPLAY_NAME}>.")
        }
      }
    }
  }

  before('functionalTest:aks') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:preview') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  before('functionalTest:aat') {
    env.NODE_ENV= 'ci'
    sh 'printenv'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  enableSlackNotifications('#div-dev')
}
